# k8s_ignition_first_main.yml
variant: fcos
version: 1.6.0

storage:
  # 1) /etc/kubernetes/pki 디렉토리 생성
  directories:
    - path: /etc/kubernetes/pki
      mode: 0700

  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: master-${TIMESTAMP_NODE_NAME}.cluster.local

    - path: /etc/hosts
      mode: 0644
      overwrite: false
      append:
        - inline: |
            ${CLUSTER_LOAD_BALANCER_END_POINT} cluster-endpoint

    # ───────── NetworkManager & WireGuard & SSH ─────────
    - path: /etc/NetworkManager/system-connections/ens160.nmconnection
      mode: 0600
      contents:
        inline: |
          [connection]
          id=ens160
          type=ethernet
          interface-name=ens160
          [ipv4]
          method=dhcp
          dns=8.8.8.8;1.1.1.1;
          [ipv6]
          method=ignore

    - path: /etc/wireguard/wg0.conf
      mode: 0600
      contents:
        source: 'data:text/plain;charset=utf-8;base64,${ENC_WG0_CONF}'

    - path: /home/core/.ssh/authorized_keys
      mode: 0600
      contents:
        inline: |
          $SSH_PUB_KEY

    # ───────── kubeadm, kubectl, kubelet 바이너리 ─────────
    - path: /usr/local/bin/kubeadm
      mode: 0755
      contents:
        source: "https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubeadm"

    - path: /usr/local/bin/kubectl
      mode: 0755
      contents:
        source: "https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubectl"

    - path: /usr/local/bin/kubelet
      mode: 0755
      contents:
        source: "https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubelet"

    - path: /var/lib/kubelet/config.yaml
      mode: 0644
      contents:
        inline: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          volumePluginDir: /var/lib/kubelet/kubelet-plugins/volume/exec

    - path: /etc/kubeadm-config.yaml
      mode: 0644
      contents:
        inline: |
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: InitConfiguration
          nodeRegistration:
            criSocket: unix:///var/run/containerd/containerd.sock
            kubeletExtraArgs:
              - name: volume-plugin-dir
                value: /var/lib/kubelet/kubelet-plugins/volume/exec
          certificateKey: "${INIT_CERT_KEY}"

          ---
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: ClusterConfiguration
          certificatesDir: /etc/kubernetes/pki
          kubernetesVersion: v${K8S_VERSION}
          controlPlaneEndpoint: cluster-endpoint:${CLUSTER_PORT}
          networking:
            podSubnet: "${POD_NETWORK_CIDR}"
          apiServer:
            certSANs:
              - "cluster-endpoint"
              - "127.0.0.1"
              - "localhost"
          controllerManager:
            extraVolumes:
              - name: flexvolume-dir
                hostPath: /var/lib/kubelet/kubelet-plugins/volume/exec
                mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
                readOnly: false
                pathType: DirectoryOrCreate
          etcd:
            local:
              extraArgs:
                - name: listen-client-urls
                  value: "https://0.0.0.0:${ETCD_CLIENT_PORT}"
                - name: listen-peer-urls
                  value: "https://0.0.0.0:${ETCD_PEER_PORT}"
                - name: advertise-client-urls
                  value: "https://cluster-endpoint:${ETCD_CLIENT_PORT},https://{WG_IP_ADDRESS}:${ETCD_CLIENT_PORT}"
                - name: initial-advertise-peer-urls
                  value: "https://cluster-endpoint:${ETCD_PEER_PORT},https://{WG_IP_ADDRESS}:${ETCD_PEER_PORT}"

          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          # kubelet specific options here
          
          volumePluginDir: /var/lib/kubelet/kubelet-plugins/volume/exec

    # ───────── Containerd 설정 ─────────
    - path: /etc/containerd/config.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"

    # ───────── br_netfilter & sysctl ─────────
    - path: /etc/modules-load.d/br_netfilter.conf
      mode: 0644
      overwrite: true
      contents:
        inline: br_netfilter

    - path: /etc/sysctl.d/kubernetes.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1

    - path: /etc/systemd/system/install-cni-plugins.service
      contents:
        inline: |
          [Unit]
          Description=Install CNI plugins
          After=network-online.target
          Wants=network-online.target

          [Service]
          Type=oneshot
          ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
          
          ExecStart=/usr/bin/bash -c '\
            curl -L https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-arm64-v1.7.1.tgz \
              | tar -C /opt/cni/bin -xz'
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target

    # ───────── Flannel CNI Service ─────────
    - path: /etc/systemd/system/kube-flannel.service
      mode: 0644
      contents:
        inline: |          
          [Unit]
          Wants=network-online.target kubeadm-init.service
          After=network-online.target kubeadm-init.service kubelet.service

          ConditionPathExists=/etc/kubernetes/admin.conf

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          Restart=on-failure
          RestartSec=5s
          Environment="KUBECONFIG=/etc/kubernetes/admin.conf"

          ExecStartPre=/usr/bin/bash -c 'until curl -k -sSf https://cluster-endpoint:${CLUSTER_PORT}/healthz >/dev/null; do sleep 1; done'
          ExecStartPre=/usr/bin/bash -c 'until curl -k -sSf https://cluster-endpoint:${CLUSTER_PORT}/readyz >/dev/null; do sleep 1; done'
          ExecStartPre=/usr/bin/bash -c '\
            until kubectl --kubeconfig=/etc/kubernetes/admin.conf get --raw /openapi/v2 >/dev/null 2>&1; \
            do sleep 1; done'

          ExecStart=/usr/local/bin/kubectl apply --validate=false -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

          StandardOutput=journal+console
          StandardError=journal+console

          [Install]
          WantedBy=multi-user.target

    # ───────── Zincati config ─────────
    - path: /etc/zincati/config.d/auto-reboot-window.toml
      mode: 0644
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          
          [updates.periodic]
          time_zone = "${ZINCATI_TIMEZONE}"

          [[updates.periodic.window]]
          days           = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]
          start_time     = "${ZINCATI_START}"
          length_minutes = ${ZINCATI_LENGTH}

systemd:
  units:        
    # A) NetworkManager, WireGuard 활성화
    - name: NetworkManager.service
      enabled: true

    - name: wg-quick@wg0.service
      enabled: true

    # B) containerd, kubelet 서비스 활성화
    - name: containerd.service
      enabled: true
      contents: |
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network-online.target NetworkManager-wait-online.service

        [Service]
        User=root
        ExecStart=/usr/bin/containerd
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/home/
        After=containerd.service network-online.target
        Requires=containerd.service network-online.target

        [Service]
        User=root
        ExecStart=
        ExecStart=/usr/local/bin/kubelet \
          --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
          --config=/var/lib/kubelet/config.yaml \
          --kubeconfig=/etc/kubernetes/kubelet.conf 
          
        Restart=on-failure
        StartLimitInterval=0
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    # C) kubeadm init 서비스 (첫 번째 마스터 용)
    - name: kubeadm-init.service
      enabled: true
      contents: |
        [Unit]
        Description=Initialize HA Control Plane (Master-0) with OpenSSL-certificates
        Requires=containerd.service
        After=containerd.service containerd.socket kubelet.service network-online.target

        # 첫 실행 후 서비스 비활성화
        ConditionPathExists=!/etc/kubernetes/manifests/kube-apiserver.yaml

        [Service]
        Type=oneshot
        ExecStartPre=/usr/bin/bash -c '\
          until [ -S /var/run/containerd/containerd.sock ] && ctr version &>/dev/null; do sleep 1; done'
        ExecStart=/usr/bin/bash -c '\
          exec /usr/local/bin/kubeadm init \
            --config=/etc/kubeadm-config.yaml \
            --upload-certs \
            --ignore-preflight-errors=all'
        ExecStartPost=/bin/mkdir -p /home/core/.kube
        ExecStartPost=/bin/cp -i /etc/kubernetes/admin.conf /home/core/.kube/config
        ExecStartPost=/bin/chown -R core:core /home/core/.kube

        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-cni-plugins.service
      enabled: true

    # D) Flannel CNI 활성화
    - name: kube-flannel.service
      enabled: true

    # E) SSHD 활성화 (선택)
    - name: sshd.service
      enabled: true

passwd:
  users:
    - name: core
      uid: 1000
      ssh_authorized_keys:
        - $SSH_PUB_KEY