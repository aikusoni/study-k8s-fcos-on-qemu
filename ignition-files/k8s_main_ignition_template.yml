---
variant: fcos
version: 1.6.0

metadata:
  name: "k8s-master"

storage:
  files:
    # 1) NetworkManager 설정 (ens160 → DHCP + DNS)
    - path: /etc/NetworkManager/system-connections/ens160.nmconnection
      mode: 0600
      contents:
        inline: |
          [connection]
          id=ens160
          type=ethernet
          interface-name=ens160
          [ipv4]
          method=dhcp
          dns=8.8.8.8;1.1.1.1;
          [ipv6]
          method=ignore

    # 2) WireGuard 설정 (wg0.conf)
    - path: /etc/wireguard/wg0.conf
      mode: 0600
      contents:
        source: data:text/plain;charset=utf-8;base64,$ENCODED_WG0_CONF_CONTENT

    # 3) Kubernetes 바이너리 다운로드 (arm64)
    - path: /usr/local/bin/kubeadm
      mode: 0755
      contents:
        source: https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubeadm

    - path: /usr/local/bin/kubectl
      mode: 0755
      contents:
        source: https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubectl

    - path: /usr/local/bin/kubelet
      mode: 0755
      contents:
        source: https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubelet

    # 4) Containerd 설정 (버전 2, runc v2 사용)
    - path: /etc/containerd/config.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"

    # 5) br_netfilter 모듈 로드
    - path: /etc/modules-load.d/br_netfilter.conf
      mode: 0644
      overwrite: true
      contents:
        inline: br_netfilter

    # 6) sysctl 설정 (쿠버네티스 요구사항)
    - path: /etc/sysctl.d/kubernetes.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1

    # 7) Flannel CNI 적용용 systemd 단위 파일 (kubeadm-init 이후 실행)
    - path: /etc/systemd/system/kube-flannel.service
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Apply Flannel CNI after Master init
          After=kubeadm-init.service
          Requires=kubeadm-init.service

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/kubectl --kubeconfig=/home/core/.kube/config apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
          RemainAfterExit=true

          [Install]
          WantedBy=multi-user.target

systemd:
  units:
    # A) NetworkManager 활성화
    - name: NetworkManager.service
      enabled: true

    # B) WireGuard 자동 기동
    - name: wg-quick@wg0.service
      enabled: true

    # C) kubeadm 바이너리를 위한 (일반) 서비스 (참고용)
    - name: kubeadm.service
      enabled: true
      contents: |
        [Unit]
        Description=kubeadm: The Kubernetes Bootstrapper
        Documentation=https://kubernetes.io/docs/home/
        After=network-online.target NetworkManager-wait-online.service

        [Service]
        User=root
        ExecStart=/usr/local/bin/kubeadm
        Restart=always
        StartLimitInterval=0
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    # D) kubelet 서비스 설정
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/home/
        After=containerd.service
        Requires=containerd.service

        [Service]
        User=root
        ExecStart=/usr/local/bin/kubelet
        Restart=always
        StartLimitInterval=0
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    # E) containerd 서비스 설정
    - name: containerd.service
      enabled: true
      contents: |
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network-online.target NetworkManager-wait-online.service

        [Service]
        User=root
        ExecStart=/usr/bin/containerd
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

    # F) kubeadm init 서비스 설정 (Master 초기화)
    - name: kubeadm-init.service
      enabled: true
      contents: |
        [Unit]
        Description=Initialize Kubernetes Cluster with kubeadm
        After=containerd.service kubelet.service
        Requires=containerd.service kubelet.service

        [Service]
        Type=oneshot
        # ─────────────────────────────────────────────────────────────────────
        # apiserver-advertise-address: WireGuard 인터페이스 IP를 사용하여
        # 노드 간 통신을 보장합니다.
        ExecStart=/usr/local/bin/kubeadm init \
          --apiserver-advertise-address=${MASTER_WG_IP} \
          --pod-network-cidr=${POD_NETWORK_CIDR} \
          --kubernetes-version=v${K8S_VERSION}
        # ─────────────────────────────────────────────────────────────────────

        # admin.conf를 core 사용자 홈에 복사하여 kubectl 사용 준비
        ExecStartPost=/bin/mkdir -p /home/core/.kube
        ExecStartPost=/bin/cp -i /etc/kubernetes/admin.conf /home/core/.kube/config
        ExecStartPost=/bin/chown -R core:core /home/core/.kube

        # (선택) Host에서 사전에 생성한 토큰을 사용하려면, 아래처럼 join-command.sh를
        # 생성하거나 별도 저장소/스크립트를 통해 Worker에게 제공할 수 있습니다.
        # ExecStartPost=/usr/local/bin/kubeadm token create \
        #   --print-join-command \
        #   --ttl 24h \
        #   --apiserver-advertise-address=${MASTER_WG_IP} \
        #   --kubernetes-version=v${K8S_VERSION} > /tmp/join-command.sh

        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    # G) Flannel CNI 적용 단위 활성화 (위에서 정의한 service)
    - name: kube-flannel.service
      enabled: true

passwd:
  users:
    - name: core
      uid: 1000
      ssh_authorized_keys:
        - $SSH_PUB_KEY