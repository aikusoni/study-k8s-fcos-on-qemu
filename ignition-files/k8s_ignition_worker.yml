variant: fcos
version: 1.6.0

metadata:
  name: "k8s-worker"

storage:
  # Worker가 사용하는 디렉토리 생성
  directories:
    - path: /var/lib/kubelet
      mode: 0755
    - path: /etc/kubernetes/manifests
      mode: 0755

  files:
    # 1) NetworkManager 설정 (ens160 → DHCP + DNS)
    - path: /etc/NetworkManager/system-connections/ens160.nmconnection
      mode: 0600
      contents:
        inline: |
          [connection]
          id=ens160
          type=ethernet
          interface-name=ens160
          [ipv4]
          method=dhcp
          dns=8.8.8.8;1.1.1.1;
          [ipv6]
          method=ignore

    # 2) WireGuard 설정 (wg0.conf)
    - path: /etc/wireguard/wg0.conf
      mode: 0600
      contents:
        source: 'data:text/plain;charset=utf-8;base64,${ENC_WG0_CONF}'

    # 3) Kubernetes 바이너리 다운로드
    - path: /usr/local/bin/kubeadm
      mode: 0755
      contents:
        source: "https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubeadm"
    - path: /usr/local/bin/kubelet
      mode: 0755
      contents:
        source: "https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/arm64/kubelet"

    # 4) Containerd 설정 (버전 2, runc v2 사용)
    - path: /etc/containerd/config.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"

    # 5) br_netfilter 모듈 로드
    - path: /etc/modules-load.d/br_netfilter.conf
      mode: 0644
      overwrite: true
      contents:
        inline: br_netfilter

    # 6) sysctl 설정 (쿠버네티스 요구사항)
    - path: /etc/sysctl.d/kubernetes.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1

    # 7) kubeadm join 구성 파일
    - path: /etc/kubeadm/join.conf
      mode: 0600
      contents:
        inline: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: JoinConfiguration
          discovery:
            bootstrapToken:
              token: ${BOOTSTRAP_TOKEN}
              apiServerEndpoint: cluster-endpoint:6443
              caCertHashes:
                - "${DISCOVERY_TOKEN_CA_CERT_HASH}"
          nodeRegistration:
            kubeletExtraArgs:
              cgroup-driver: "systemd"

    # 8) SSH 키
    - path: /home/core/.ssh/authorized_keys
      mode: 0600
      contents:
        inline: |
          ${SSH_PUB_KEY}

systemd:
  units:
    # A) NetworkManager 활성화
    - name: NetworkManager.service
      enabled: true

    # B) WireGuard 자동 기동
    - name: wg-quick@wg0.service
      enabled: true

    # C) containerd 서비스
    - name: containerd.service
      enabled: true
      contents: |
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network-online.target NetworkManager-wait-online.service

        [Service]
        ExecStart=/usr/bin/containerd
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

    # D) kubelet 서비스
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/home/
        After=containerd.service
        Requires=containerd.service

        [Service]
        ExecStart=/usr/local/bin/kubelet
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    # E) kubeadm join 서비스
    - name: kubeadm-join.service
      enabled: true
      contents: |
        [Unit]
        Description=Join Kubernetes cluster as Worker
        After=network-online.target containerd.service kubelet.service wg-quick@wg0.service
        Requires=containerd.service kubelet.service wg-quick@wg0.service

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/kubeadm join --config /etc/kubeadm/join.conf \
          --skip-phases=certs \
          --certificate-dir=/etc/kubernetes/pki

        [Install]
        WantedBy=